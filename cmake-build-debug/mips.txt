.data
PrintString24: .asciiz " !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
PrintString23: .asciiz ""
PrintString22: .asciiz "test_array is "
PrintString21: .asciiz "Constant and parameter have the same name"
PrintString20: .asciiz "call_for"
PrintString19: .asciiz "d[2] after h"
PrintString18: .asciiz "d[2] before h"
PrintString17: .asciiz "do_while"
PrintString16: .asciiz "while"
PrintString15: .asciiz "only if"
PrintString14: .asciiz "if_else"
PrintString13: .asciiz "assign to int and char"
PrintString12: .asciiz "test_while is "
PrintString11: .asciiz "the count3 is "
PrintString10: .asciiz "the count2 is "
PrintString9: .asciiz "the count1 is "
PrintString8: .asciiz "the test_while is "
PrintString7: .asciiz "the count3 is "
PrintString6: .asciiz "the count2 is "
PrintString5: .asciiz "the count1 is "
PrintString4: .asciiz "test_if_error_2"
PrintString3: .asciiz "test_if_error_4"
PrintString2: .asciiz "test_if_right,the char is "
PrintString1: .asciiz "test_if_error_3"
PrintString0: .asciiz "test_if_error_1"

# const char test_cover_a = 'a'
test_cover_a: .word 97

# const char test_if = '+'
test_if: .word 43

# const int test_cover_1 = 1
test_cover_1: .word 1

# const char test_while_a = '0'
test_while_a: .word 48

# const char test_while_z = 'z'
test_while_z: .word 122

# const int a = 2
a: .word 2

# var int b
b: .word 0

# var int e
e: .word 0

# var int c
c: .word 0

# var int d[5]
d: .word 0:5

# var int i
i: .word 0

# var char g
g: .word 0

# var int test_cover_2
test_cover_2: .word 0

# var int test_cover_3[5]
test_cover_3: .word 0:5

# var char test_cover_b
test_cover_b: .word 0

# var char test_cover_c[10]
test_cover_c: .word 0:10

# var char test_function_1
test_function_1: .word 0

# var int test_while
test_while: .word 0

# var int test_function_2
test_function_2: .word 0

# int Test_Function_1()
.text
j main
Test_Function_1:

# para int n

# t3 = n * n
mul $t0, $a0, $a0

# t0 = n + t3
add $t1, $a0, $t0

# ret t0
move $v0, $t1
jr $ra

# int Test_Function_2()
Test_Function_2:

# para int n

# n <= 0

# IfBegin

# BZ Label_0
bgt $a0, 0, Label_0

# t12 = -1
subi $t2, $0, 1

# ret t12
move $v0, $t2
jr $ra

# IfRestoreRegs
sw $t2, -8($sp)

# Label_0:
Label_0:

# IfEnd

# n == 1

# IfBegin

# BZ Label_2
bne $a0, 1, Label_2

# ret 1
li $v0, 1
jr $ra

# IfRestoreRegs

# Label_2:
Label_2:

# IfEnd

# n == 2

# IfBegin

# BZ Label_4
bne $a0, 2, Label_4

# ret 1
li $v0, 1
jr $ra

# IfRestoreRegs

# Label_4:
Label_4:

# IfEnd

# t37 = n - 1
subi $t3, $a0, 1

# SaveEnvironment
sw $ra, -4($sp)
sw $a0, 0($sp)
sw $t3, -12($sp)

# push t37
move $a0, $t3

# call Test_Function_2
subi $sp, $sp, 16
jal Test_Function_2

# RestoreEnvironment
addi $sp, $sp, 16
lw $ra, -4($sp)
lw $a0, 0($sp)
lw $t3, -12($sp)

# t33 = RET
move $t4, $v0

# t45 = n - 2
subi $t5, $a0, 2

# SaveEnvironment
sw $ra, -4($sp)
sw $a0, 0($sp)
sw $t3, -12($sp)
sw $t4, -16($sp)
sw $t5, -20($sp)

# push t45
move $a0, $t5

# call Test_Function_2
subi $sp, $sp, 24
jal Test_Function_2

# RestoreEnvironment
addi $sp, $sp, 24
lw $ra, -4($sp)
lw $a0, 0($sp)
lw $t3, -12($sp)
lw $t4, -16($sp)
lw $t5, -20($sp)

# t42 = RET
move $t6, $v0

# t33 = t33 + t42
add $t4, $t4, $t6

# ret t33
move $v0, $t4
jr $ra

# void test_cover()
test_cover:

# const char test_cover_a = 'A'
li $t7, 65

# const int test_cover_1 = -1
li $t8, -1

# var int test_cover_2

# var int test_cover_3[6]

# var char test_cover_b

# var char test_cover_c[5]

# t50 = -2
subi $t0, $0, 2

# test_cover_2 = t50
la $t1, test_cover_2
lw $t1, 0($t1)
move $t1, $t0

# t56 = -3
subi $t2, $0, 3

# test_cover_3[3] = t56
addi $t3, $sp, -4
sw $t2, -12($t3)

# test_cover_b = 'B'
la $t5, test_cover_b
lw $t5, 0($t5)
li $t5, 66

# test_cover_c[3] = 'C'
addi $t6, $sp, -28
li $v1, 67
sw $v1, -12($t6)

# PrintfTypeDef charType 

# printf test_cover_a
li $v0, 11
move $a0, $t7
syscall
li $v0, 11
li $a0, 10
syscall

# PrintfTypeDef intType 

# printf test_cover_1
li $v0, 1
move $a0, $t8
syscall
li $v0, 11
li $a0, 10
syscall

# ret 
jr $ra

# int f()
f:

# para int z

# var int b

# b = 3 * -1
la $t4, b
lw $t4, 0($t4)
li $t4, -3

# b = b + z
add $t4, $t4, $a0

# ret b
move $v0, $t4
jr $ra

# void h()
h:

# para int y

# para char x

# t89 = y * y
mul $t1, $a0, $a0

# e = x + t89
la $t0, e
lw $t0, 0($t0)
add $t0, $a1, $t1

# ret 
jr $ra

# ret 
jr $ra

# char l()
l:

# ret 'l'
li $v0, 108
jr $ra

# void Test_IF()
Test_IF:

# para char test_if

# test_if <= '0'

# IfBegin

# BZ Label_6
bgt $a0, 48, Label_6

# PrintfTypeDef strType 

# printf "test_if_error_1"
move $v1, $a0
la $a0, PrintString0
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# GOTO Label_7
j Label_7

# Label_6:
Label_6:

# ElseBegin

# test_if >= 'A'

# IfBegin

# BZ Label_8
blt $a0, 65, Label_8

# test_if > 'a'

# IfBegin

# BZ Label_10
ble $a0, 97, Label_10

# PrintfTypeDef strType 

# printf "test_if_error_3"
move $v1, $a0
la $a0, PrintString1
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# ret 
jr $ra

# IfRestoreRegs

# Label_10:
Label_10:

# IfEnd

# test_if == '_'

# IfBegin

# BZ Label_12
bne $a0, 95, Label_12

# PrintfTypeDef strType charType 

# printf "test_if_right,the char is " test_if
move $v1, $a0
la $a0, PrintString2
li $v0, 4
syscall
li $v0, 11
move $a0, $v1
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# ret 
jr $ra

# GOTO Label_13
j Label_13

# Label_12:
Label_12:

# ElseBegin

# PrintfTypeDef strType 

# printf "test_if_error_4"
move $v1, $a0
la $a0, PrintString3
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# ret 
jr $ra

# ElseEnd

# Label_13:
Label_13:

# GOTO Label_9
j Label_9

# Label_8:
Label_8:

# ElseBegin

# PrintfTypeDef strType 

# printf "test_if_error_2"
move $v1, $a0
la $a0, PrintString4
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# ret 
jr $ra

# ElseEnd

# Label_9:
Label_9:

# ElseEnd

# Label_7:
Label_7:

# ret 
jr $ra

# void Test_While()
Test_While:

# para int test_while

# var int count1

# var int count2

# var int count3

# count1 = 0
li $t2, 0

# count2 = 0
li $t3, 0

# count3 = 0
li $t5, 0

# LoopSaveRegStatus

# Label_14:
Label_14:

# test_while < 'z'

# BZ Label_15
bge $a0, 122, Label_15

# LoopSaveRegStatus

# Label_16:
Label_16:

# test_while <= 'Z'

# BZ Label_17
bgt $a0, 90, Label_17

# LoopSaveRegStatus

# Label_18:
Label_18:

# test_while < 'A'

# BZ Label_19
bge $a0, 65, Label_19

# count1 = count1 + 1
addi $t2, $t2, 1

# test_while = test_while + 1
addi $a0, $a0, 1

# LoopRestoreRegStatus

# GOTO Label_18
j Label_18

# Label_19:
Label_19:

# LoopEnd

# count2 = count2 + 2
addi $t3, $t3, 2

# test_while = test_while + 1
addi $a0, $a0, 1

# LoopRestoreRegStatus

# GOTO Label_16
j Label_16

# Label_17:
Label_17:

# LoopEnd

# count3 = count3 + 3
addi $t5, $t5, 3

# test_while = test_while + 1
addi $a0, $a0, 1

# LoopRestoreRegStatus

# GOTO Label_14
j Label_14

# Label_15:
Label_15:

# LoopEnd

# PrintfTypeDef strType intType 

# printf "the count1 is " count1
move $v1, $a0
la $a0, PrintString5
li $v0, 4
syscall
li $v0, 1
move $a0, $t2
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# PrintfTypeDef strType intType 

# printf "the count2 is " count2
move $v1, $a0
la $a0, PrintString6
li $v0, 4
syscall
li $v0, 1
move $a0, $t3
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# PrintfTypeDef strType intType 

# printf "the count3 is " count3
move $v1, $a0
la $a0, PrintString7
li $v0, 4
syscall
li $v0, 1
move $a0, $t5
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# PrintfTypeDef strType intType 

# printf "the test_while is " test_while
move $v1, $a0
la $a0, PrintString8
li $v0, 4
syscall
li $v0, 1
move $a0, $v1
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# ret 
jr $ra

# void Test_Do_While()
Test_Do_While:

# para int test_while

# var int count1

# var int count2

# var int count3

# count1 = 0
li $t6, 0

# count2 = 0
li $t7, 0

# count3 = 0
li $t8, 0

# LoopSaveRegStatus

# Label_20:
Label_20:

# LoopSaveRegStatus

# Label_21:
Label_21:

# LoopSaveRegStatus

# Label_22:
Label_22:

# count1 = count1 + 1
addi $t6, $t6, 1

# test_while = test_while + 1
addi $a0, $a0, 1

# test_while < 'A'

# BNZ Label_22
move $k0, $a0
move $k1, $t4
sw $t4, -8($sp)
blt $k0, $k1, Label_22

# LoopEnd

# count2 = count2 + 1
addi $t7, $t7, 1

# test_while = test_while + 1
addi $a0, $a0, 1

# test_while <= 'Z'

# BNZ Label_21
move $k0, $a0
move $k1, $t0
sw $t0, -12($sp)
ble $k0, $k1, Label_21

# LoopEnd

# count3 = count3 + 1
addi $t8, $t8, 1

# test_while = test_while + 1
addi $a0, $a0, 1

# test_while < 'z'

# BNZ Label_20
move $k0, $a0
move $k1, $t1
sw $t1, -16($sp)
blt $k0, $k1, Label_20

# LoopEnd

# PrintfTypeDef strType intType 

# printf "the count1 is " count1
move $v1, $a0
la $a0, PrintString9
li $v0, 4
syscall
li $v0, 1
move $a0, $t6
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# PrintfTypeDef strType intType 

# printf "the count2 is " count2
move $v1, $a0
la $a0, PrintString10
li $v0, 4
syscall
li $v0, 1
move $a0, $t7
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# PrintfTypeDef strType intType 

# printf "the count3 is " count3
move $v1, $a0
la $a0, PrintString11
li $v0, 4
syscall
li $v0, 1
move $a0, $t8
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# PrintfTypeDef strType intType 

# printf "test_while is " test_while
move $v1, $a0
la $a0, PrintString12
li $v0, 4
syscall
li $v0, 1
move $a0, $v1
syscall
li $v0, 11
li $a0, 10
syscall
move $a0, $v1

# ret 
jr $ra

# int test_array()
test_array:

# var int array_int[5]

# var int i

# var int result

# var char array_char[5]

# array_char[0] = '1'
addi $t2, $sp, -24
li $v1, 49
sw $v1, 0($t2)

# array_char[1] = '1'
addi $t3, $sp, -24
li $v1, 49
sw $v1, -4($t3)

# array_char[2] = '/'
addi $t5, $sp, -24
li $v1, 47
sw $v1, -8($t5)

# array_char[3] = '-'
addi $t4, $sp, -24
li $v1, 45
sw $v1, -12($t4)

# array_char[4] = 'K'
addi $t0, $sp, -24
li $v1, 75
sw $v1, -16($t0)

# i = 0
la $t1, i
lw $t1, 0($t1)
li $t1, 0

# LoopSaveRegStatus

# Label_23:
Label_23:

# i < 5

# BZ Label_24
bge $t1, 5, Label_24

# t344 = i * 5
mul $t6, $t1, 5

# t344 = t344 + 1
addi $t6, $t6, 1

# array_int[i] = t344
addi $t7, $sp, -4
sll $t8, $t1, 2
sub $t7, $t7, $t8
sw $t6, 0($t7)

# i = i + 1
addi $t1, $t1, 1

# LoopRestoreRegStatus
sw $t6, -44($sp)

# GOTO Label_23
j Label_23

# Label_24:
Label_24:

# LoopEnd

# i = 0
li $t1, 0

# result = 0
li $t2, 0

# LoopSaveRegStatus

# Label_25:
Label_25:

# i < 5

# BZ Label_26
bge $t1, 5, Label_26

# t371 = array_int[i]
addi $t5, $sp, -4
sll $t4, $t1, 2
sub $t5, $t5, $t4
lw $t3, 0($t5)

# t375 = array_char[i]
addi $t8, $sp, -24
sll $t7, $t1, 2
sub $t8, $t8, $t7
lw $t0, 0($t8)

# t370 = t371 * t375
mul $t6, $t3, $t0

# result = result + t370
add $t2, $t2, $t6

# i = i + 1
addi $t1, $t1, 1

# LoopRestoreRegStatus
sw $t0, -48($sp)
sw $t3, -52($sp)
sw $t6, -56($sp)

# GOTO Label_25
j Label_25

# Label_26:
Label_26:

# LoopEnd

# ret result
move $v0, $t2
jr $ra

# char test_expression()
test_expression:

# t387 = 'A'
li $t4, 65

# t390 = 'd'
li $t5, 100

# SaveEnvironment
sw $ra, 0($sp)
sw $t4, -4($sp)
sw $t5, -8($sp)

# push 2
li $a0, 2

# call Test_Function_1
subi $sp, $sp, 12
jal Test_Function_1

# RestoreEnvironment
addi $sp, $sp, 12
lw $ra, 0($sp)
lw $t4, -4($sp)
lw $t5, -8($sp)

# t398 = RET
move $t7, $v0

# SaveEnvironment
sw $ra, 0($sp)
sw $t4, -4($sp)
sw $t5, -8($sp)
sw $t7, -12($sp)

# push t398
move $a0, $t7

# call Test_Function_1
subi $sp, $sp, 16
jal Test_Function_1

# RestoreEnvironment
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $t4, -4($sp)
lw $t5, -8($sp)
lw $t7, -12($sp)

# t394 = RET
move $t8, $v0

# SaveEnvironment
sw $ra, 0($sp)
sw $t4, -4($sp)
sw $t5, -8($sp)
sw $t7, -12($sp)
sw $t8, -16($sp)

# push t394
move $a0, $t8

# call Test_Function_1
subi $sp, $sp, 20
jal Test_Function_1

# RestoreEnvironment
addi $sp, $sp, 20
lw $ra, 0($sp)
lw $t4, -4($sp)
lw $t5, -8($sp)
lw $t7, -12($sp)
lw $t8, -16($sp)

# t392 = RET
move $t1, $v0

# t390 = t390 * t392
mul $t5, $t5, $t1

# t387 = t387 + t390
add $t4, $t4, $t5

# t387 != 180665

# IfBegin

# BZ Label_27
beq $t4, 180665, Label_27

# ret 'a'
li $v0, 97
jr $ra

# IfRestoreRegs

# Label_27:
Label_27:

# IfEnd

# t412 = '+' * -3
li $t0, -129

# t411 = -t412
sub $t3, $0, $t0

# t411 = t411 + -0
addi $t3, $t3, 0

# t419 = 'a' - 'b'
li $t6, -1

# t417 = -100 * t419
mul $t2, $t6, -100

# t411 = t411 - t417
sub $t3, $t3, $t2

# t411 != 29

# IfBegin

# BZ Label_29
beq $t3, 29, Label_29

# ret 'b'
li $v0, 98
jr $ra

# IfRestoreRegs

# Label_29:
Label_29:

# IfEnd

# t433 = test_cover_3[3]
sw $t7, -12($sp)
sw $t8, -16($sp)
la $t8, test_cover_3
lw $t7, 12($t8)

# t431 = -t433
sw $t1, -20($sp)
sub $t1, $0, $t7

# t439 = 1000 - 0
sw $t5, -8($sp)
li $t5, 1000

# t437 = t439 - -2
sw $t4, -4($sp)
subi $t4, $t5, -2

# t437 = t437 / 2
div $t4, $t4, 2

# t431 = t431 + t437
add $t1, $t1, $t4

# t431 != 498

# IfBegin

# BZ Label_31
beq $t1, 498, Label_31

# ret 'c'
li $v0, 99
jr $ra

# IfRestoreRegs

# Label_31:
Label_31:

# IfEnd

# t453 = 6 / 10
sw $t0, -24($sp)
li $t0, 0

# t459 = 6 + -1
sw $t6, -28($sp)
li $t6, 5

# t457 = 6 / t459
sw $t2, -32($sp)
sw $t3, -36($sp)
li $t3, 6
div $t3, $t6
mflo $t2

# t457 = t457 * 7
mul $t2, $t2, 7

# t466 = test_cover_c[3]
sw $t7, -40($sp)
la $t7, test_cover_c
lw $t8, 12($t7)

# t457 = t457 * t466
mul $t2, $t2, $t8

# t453 = t453 - t457
sub $t0, $t0, $t2

# t470 = -693
sw $t5, -44($sp)
subi $t5, $0, 693

# t453 != t470

# IfBegin

# BZ Label_33
beq $t0, $t5, Label_33

# ret 'd'
li $v0, 100
jr $ra

# IfRestoreRegs

# Label_33:
Label_33:

# IfEnd

# t483 = 6 - 3
sw $t4, -48($sp)
li $t4, 3

# t482 = t483 * 7
sw $t1, -52($sp)
mul $t1, $t4, 7

# t480 = t482 + 5
addi $t3, $t1, 5

# t479 = t480 * 8
sw $t6, -56($sp)
mul $t6, $t3, 8

# t477 = t479 + 9
addi $t7, $t6, 9

# t476 = t477 * -10
sw $t8, -60($sp)
mul $t8, $t7, -10

# t476 = t476 + 11
addi $t8, $t8, 11

# t499 = -2159
sw $t2, -64($sp)
subi $t2, $0, 2159

# t476 != t499

# IfBegin

# BZ Label_35
beq $t8, $t2, Label_35

# ret 'e'
li $v0, 101
jr $ra

# IfRestoreRegs

# Label_35:
Label_35:

# IfEnd

# ret 'R'
li $v0, 82
jr $ra

# void main()
main:

# var int test_function_2

# scanf test_function_1 test_function_2
li $v0, 12
syscall
la $t0, test_function_1
lw $t0, 0($t0)
move $t0, $v0
li $v0, 5
syscall
la $t5, test_function_2
lw $t5, 0($t5)
move $t5, $v0

# scanf test_cover_2 test_cover_b
li $v0, 5
syscall
la $t4, test_cover_2
lw $t4, 0($t4)
move $t4, $v0
li $v0, 12
syscall
la $t1, test_cover_b
lw $t1, 0($t1)
move $t1, $v0

# scanf test_while
li $v0, 5
syscall
la $t3, test_while
lw $t3, 0($t3)
move $t3, $v0

# t524 = test_function_1 - 'a'
subi $t6, $t0, 97

# SaveEnvironment
sw $ra, 0($sp)
la $v1, test_function_1
sw $t0, 0($v1)
la $v1, test_cover_b
sw $t1, 0($v1)
la $v1, test_while
sw $t3, 0($v1)
la $v1, test_cover_2
sw $t4, 0($v1)
sw $t5, -4($sp)
sw $t6, -8($sp)

# push t524
move $a0, $t6

# call Test_Function_1
subi $sp, $sp, 12
jal Test_Function_1

# RestoreEnvironment
addi $sp, $sp, 12
lw $ra, 0($sp)
la $v1, test_function_1
lw $t0, 0($v1)
la $v1, test_cover_b
lw $t1, 0($v1)
la $v1, test_while
lw $t3, 0($v1)
la $v1, test_cover_2
lw $t4, 0($v1)
lw $t5, -4($sp)
lw $t6, -8($sp)

# t520 = RET
move $t7, $v0

# SaveEnvironment
sw $ra, 0($sp)
la $v1, test_function_1
sw $t0, 0($v1)
la $v1, test_cover_b
sw $t1, 0($v1)
la $v1, test_while
sw $t3, 0($v1)
la $v1, test_cover_2
sw $t4, 0($v1)
sw $t5, -4($sp)
sw $t6, -8($sp)
sw $t7, -12($sp)

# push t520
move $a0, $t7

# call Test_Function_1
subi $sp, $sp, 16
jal Test_Function_1

# RestoreEnvironment
addi $sp, $sp, 16
lw $ra, 0($sp)
la $v1, test_function_1
lw $t0, 0($v1)
la $v1, test_cover_b
lw $t1, 0($v1)
la $v1, test_while
lw $t3, 0($v1)
la $v1, test_cover_2
lw $t4, 0($v1)
lw $t5, -4($sp)
lw $t6, -8($sp)
lw $t7, -12($sp)

# t516 = RET
move $t8, $v0

# SaveEnvironment
sw $ra, 0($sp)
la $v1, test_function_1
sw $t0, 0($v1)
la $v1, test_cover_b
sw $t1, 0($v1)
la $v1, test_while
sw $t3, 0($v1)
la $v1, test_cover_2
sw $t4, 0($v1)
sw $t5, -4($sp)
sw $t6, -8($sp)
sw $t7, -12($sp)
sw $t8, -16($sp)

# push t516
move $a0, $t8

# call Test_Function_1
subi $sp, $sp, 20
jal Test_Function_1

# RestoreEnvironment
addi $sp, $sp, 20
lw $ra, 0($sp)
la $v1, test_function_1
lw $t0, 0($v1)
la $v1, test_cover_b
lw $t1, 0($v1)
la $v1, test_while
lw $t3, 0($v1)
la $v1, test_cover_2
lw $t4, 0($v1)
lw $t5, -4($sp)
lw $t6, -8($sp)
lw $t7, -12($sp)
lw $t8, -16($sp)

# t512 = RET
move $t2, $v0

# SaveEnvironment
sw $ra, 0($sp)
la $v1, test_function_1
sw $t0, 0($v1)
la $v1, test_cover_b
sw $t1, 0($v1)
sw $t2, -20($sp)
la $v1, test_while
sw $t3, 0($v1)
la $v1, test_cover_2
sw $t4, 0($v1)
sw $t5, -4($sp)
sw $t6, -8($sp)
sw $t7, -12($sp)
sw $t8, -16($sp)

# push t512
move $a0, $t2

# call Test_Function_1
subi $sp, $sp, 24
jal Test_Function_1

# RestoreEnvironment
addi $sp, $sp, 24
lw $ra, 0($sp)
la $v1, test_function_1
lw $t0, 0($v1)
la $v1, test_cover_b
lw $t1, 0($v1)
lw $t2, -20($sp)
la $v1, test_while
lw $t3, 0($v1)
la $v1, test_cover_2
lw $t4, 0($v1)
lw $t5, -4($sp)
lw $t6, -8($sp)
lw $t7, -12($sp)
lw $t8, -16($sp)

# t508 = RET
la $v1, test_function_1
sw $t0, 0($v1)
move $t0, $v0

# PrintfTypeDef intType 

# printf t508
li $v0, 1
move $a0, $t0
syscall
li $v0, 11
li $a0, 10
syscall

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -24($sp)
la $v1, test_cover_b
sw $t1, 0($v1)
sw $t2, -20($sp)
la $v1, test_while
sw $t3, 0($v1)
la $v1, test_cover_2
sw $t4, 0($v1)
sw $t5, -4($sp)
sw $t6, -8($sp)
sw $t7, -12($sp)
sw $t8, -16($sp)

# push test_function_2
move $a0, $t5

# call Test_Function_2
subi $sp, $sp, 28
jal Test_Function_2

# RestoreEnvironment
addi $sp, $sp, 28
lw $ra, 0($sp)
lw $t0, -24($sp)
la $v1, test_cover_b
lw $t1, 0($v1)
lw $t2, -20($sp)
la $v1, test_while
lw $t3, 0($v1)
la $v1, test_cover_2
lw $t4, 0($v1)
lw $t5, -4($sp)
lw $t6, -8($sp)
lw $t7, -12($sp)
lw $t8, -16($sp)

# t529 = RET
sw $t0, -24($sp)
move $t0, $v0

# PrintfTypeDef intType 

# printf t529
li $v0, 1
move $a0, $t0
syscall
li $v0, 11
li $a0, 10
syscall

# test_cover_3[3] = 3
la $v1, test_cover_b
sw $t1, 0($v1)
la $t1, test_cover_3
li $v1, 3
sw $v1, 12($t1)

# test_cover_c[3] = 'c'
sw $t2, -20($sp)
la $t2, test_cover_c
li $v1, 99
sw $v1, 12($t2)

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -28($sp)
la $v1, test_while
sw $t3, 0($v1)
la $v1, test_cover_2
sw $t4, 0($v1)
sw $t5, -4($sp)
sw $t6, -8($sp)
sw $t7, -12($sp)
sw $t8, -16($sp)

# call test_cover
subi $sp, $sp, 32
jal test_cover

# RestoreEnvironment
addi $sp, $sp, 32
lw $ra, 0($sp)
lw $t0, -28($sp)
la $v1, test_while
lw $t3, 0($v1)
la $v1, test_cover_2
lw $t4, 0($v1)
lw $t5, -4($sp)
lw $t6, -8($sp)
lw $t7, -12($sp)
lw $t8, -16($sp)

# PrintfTypeDef intType 

# printf test_cover_2
li $v0, 1
move $a0, $t4
syscall
li $v0, 11
li $a0, 10
syscall

# PrintfTypeDef charType 

# printf test_cover_b
li $v0, 11
la $t1, test_cover_b
lw $t1, 0($t1)
move $a0, $t1
syscall
li $v0, 11
li $a0, 10
syscall

# t556 = test_cover_3[3]
sw $t0, -28($sp)
la $t0, test_cover_3
lw $t2, 12($t0)

# PrintfTypeDef intType 

# printf t556
li $v0, 1
move $a0, $t2
syscall
li $v0, 11
li $a0, 10
syscall

# t562 = test_cover_c[3]
la $v1, test_while
sw $t3, 0($v1)
sw $t5, -4($sp)
la $t5, test_cover_c
lw $t3, 12($t5)

# PrintfTypeDef charType 

# printf t562
li $v0, 11
move $a0, $t3
syscall
li $v0, 11
li $a0, 10
syscall

# PrintfTypeDef strType 

# printf "assign to int and char"
la $a0, PrintString13
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall

# scanf c g
li $v0, 5
syscall
sw $t6, -8($sp)
la $t6, c
lw $t6, 0($t6)
move $t6, $v0
li $v0, 12
syscall
sw $t7, -12($sp)
la $t7, g
lw $t7, 0($t7)
move $t7, $v0

# d[2] = 1
sw $t8, -16($sp)
la $t8, d
li $v1, 1
sw $v1, 8($t8)

# t574 = d[2]
la $v1, test_cover_2
sw $t4, 0($v1)
la $v1, test_cover_b
sw $t1, 0($v1)
la $t1, d
lw $t4, 8($t1)

# t574 != 0

# IfBegin

# BZ Label_37
beq $t4, 0, Label_37

# t582 = d[2]
sw $t2, -32($sp)
la $t2, d
lw $t0, 8($t2)

# b = c + t582
la $t5, b
lw $t5, 0($t5)
add $t5, $t6, $t0

# GOTO Label_38
j Label_38

# Label_37:
Label_37:

# ElseBegin

# t592 = d[2]
sw $t3, -36($sp)
la $v1, g
sw $t7, 0($v1)
la $t7, d
lw $t3, 8($t7)

# SaveEnvironment
sw $ra, 0($sp)
sw $t2, -32($sp)
sw $t3, -40($sp)
sw $t4, -44($sp)
la $v1, c
sw $t6, 0($v1)

# push t592
move $a0, $t3

# call f
subi $sp, $sp, 48
jal f

# RestoreEnvironment
addi $sp, $sp, 48
lw $ra, 0($sp)
lw $t2, -32($sp)
lw $t3, -40($sp)
lw $t4, -44($sp)
la $v1, c
lw $t6, 0($v1)

# b = RET
la $t8, b
lw $t8, 0($t8)
move $t8, $v0

# ElseEnd
sw $t2, -32($sp)
sw $t3, -40($sp)
lw $t3, -36($sp)
la $v1, b
sw $t8, 0($v1)
la $t5, b
lw $t5, 0($t5)
la $t7, g
lw $t7, 0($t7)

# Label_38:
Label_38:

# PrintfTypeDef strType intType 

# printf "if_else" b
la $a0, PrintString14
li $v0, 4
syscall
li $v0, 1
move $a0, $t5
syscall
li $v0, 11
li $a0, 10
syscall

# a > 0

# IfBegin

# BZ Label_39
la $t1, a
lw $t1, 0($t1)
ble $t1, 0, Label_39

# b = c
move $t5, $t6

# IfRestoreRegs
la $v1, a
sw $t1, 0($v1)

# Label_39:
Label_39:

# IfEnd

# PrintfTypeDef strType intType 

# printf "only if" b
la $a0, PrintString15
li $v0, 4
syscall
li $v0, 1
move $a0, $t5
syscall
li $v0, 11
li $a0, 10
syscall

# i = 0
sw $t4, -44($sp)
la $t4, i
lw $t4, 0($t4)
li $t4, 0

# LoopSaveRegStatus

# Label_41:
Label_41:

# i < 5

# BZ Label_42
bge $t4, 5, Label_42

# t624 = d[2]
sw $t3, -36($sp)
la $t3, d
lw $t2, 8($t3)

# c = c + t624
add $t6, $t6, $t2

# i = i + 1
addi $t4, $t4, 1

# LoopRestoreRegStatus
sw $t2, -48($sp)
lw $t3, -36($sp)

# GOTO Label_41
j Label_41

# Label_42:
Label_42:

# LoopEnd

# PrintfTypeDef strType intType 

# printf "while" c
la $a0, PrintString16
li $v0, 4
syscall
li $v0, 1
move $a0, $t6
syscall
li $v0, 11
li $a0, 10
syscall

# LoopSaveRegStatus

# Label_43:
Label_43:

# i = i - 1
subi $t4, $t4, 1

# i >= 0

# BNZ Label_43
move $k0, $t4
move $k1, $t8
sw $t8, -52($sp)
bge $k0, $k1, Label_43

# LoopEnd

# PrintfTypeDef strType intType 

# printf "do_while" i
la $a0, PrintString17
li $v0, 4
syscall
li $v0, 1
move $a0, $t4
syscall
li $v0, 11
li $a0, 10
syscall

# t652 = d[2]
sw $t0, -56($sp)
la $v1, g
sw $t7, 0($v1)
la $t7, d
lw $t0, 8($t7)

# PrintfTypeDef strType intType 

# printf "d[2] before h" t652
la $a0, PrintString18
li $v0, 4
syscall
li $v0, 1
move $a0, $t0
syscall
li $v0, 11
li $a0, 10
syscall

# t661 = d[2]
la $v1, b
sw $t5, 0($v1)
la $t5, d
lw $t1, 8($t5)

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -60($sp)
sw $t1, -64($sp)
sw $t3, -36($sp)
sw $t4, -68($sp)
sw $t6, -72($sp)

# push c
move $a0, $t6

# push t661
move $a1, $t1

# call h
subi $sp, $sp, 76
jal h

# RestoreEnvironment
addi $sp, $sp, 76
lw $ra, 0($sp)
lw $t0, -60($sp)
lw $t1, -64($sp)
lw $t3, -36($sp)
lw $t4, -68($sp)
lw $t6, -72($sp)

# t667 = d[2]
la $t8, d
lw $t2, 8($t8)

# PrintfTypeDef strType intType 

# printf "d[2] after h" t667
la $a0, PrintString19
li $v0, 4
syscall
li $v0, 1
move $a0, $t2
syscall
li $v0, 11
li $a0, 10
syscall

# i = 0
li $t4, 0

# LoopSaveRegStatus

# Label_44:
Label_44:

# i < 5

# BZ Label_45
bge $t4, 5, Label_45

# t681 = d[2]
la $t5, d
lw $t7, 8($t5)

# c = t681 + 1
addi $t6, $t7, 1

# t687 = 2
sw $t0, -60($sp)
li $t0, 2

# t690 = e
sw $t1, -64($sp)
sw $t3, -36($sp)
la $t3, e
lw $t3, 0($t3)
move $t1, $t3

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -76($sp)
sw $t1, -80($sp)
sw $t2, -84($sp)
la $v1, e
sw $t3, 0($v1)
sw $t4, -68($sp)
sw $t6, -72($sp)
sw $t7, -88($sp)

# call l
subi $sp, $sp, 92
jal l

# RestoreEnvironment
addi $sp, $sp, 92
lw $ra, 0($sp)
lw $t0, -76($sp)
lw $t1, -80($sp)
lw $t2, -84($sp)
la $v1, e
lw $t3, 0($v1)
lw $t4, -68($sp)
lw $t6, -72($sp)
lw $t7, -88($sp)

# t693 = RET
move $t8, $v0

# t690 = t690 + t693
add $t1, $t1, $t8

# d[t687] = t690
sw $t2, -84($sp)
la $t5, d
sll $t2, $t0, 2
add $t5, $t5, $t2
sw $t1, 0($t5)

# i = i + 1
addi $t4, $t4, 1

# LoopRestoreRegStatus
sw $t0, -76($sp)
lw $t0, -60($sp)
sw $t1, -80($sp)
lw $t1, -64($sp)
la $v1, e
sw $t3, 0($v1)
lw $t3, -36($sp)
sw $t7, -88($sp)
sw $t8, -92($sp)
lw $t2, -84($sp)

# GOTO Label_44
j Label_44

# Label_45:
Label_45:

# LoopEnd

# t698 = d[2]
sw $t6, -72($sp)
la $t5, d
lw $t6, 8($t5)

# PrintfTypeDef strType intType 

# printf "call_for" t698
la $a0, PrintString20
li $v0, 4
syscall
li $v0, 1
move $a0, $t6
syscall
li $v0, 11
li $a0, 10
syscall

# PrintfTypeDef strType 

# printf "Constant and parameter have the same name"
la $a0, PrintString21
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -60($sp)
sw $t1, -64($sp)
sw $t2, -84($sp)
sw $t3, -36($sp)
sw $t4, -68($sp)
sw $t6, -96($sp)

# push '_'
li $a0, 95

# call Test_IF
subi $sp, $sp, 100
jal Test_IF

# RestoreEnvironment
addi $sp, $sp, 100
lw $ra, 0($sp)
lw $t0, -60($sp)
lw $t1, -64($sp)
lw $t2, -84($sp)
lw $t3, -36($sp)
lw $t4, -68($sp)
lw $t6, -96($sp)

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -60($sp)
sw $t1, -64($sp)
sw $t2, -84($sp)
sw $t3, -36($sp)
sw $t4, -68($sp)
sw $t6, -96($sp)

# push '0'
li $a0, 48

# call Test_While
subi $sp, $sp, 100
jal Test_While

# RestoreEnvironment
addi $sp, $sp, 100
lw $ra, 0($sp)
lw $t0, -60($sp)
lw $t1, -64($sp)
lw $t2, -84($sp)
lw $t3, -36($sp)
lw $t4, -68($sp)
lw $t6, -96($sp)

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -60($sp)
sw $t1, -64($sp)
sw $t2, -84($sp)
sw $t3, -36($sp)
sw $t4, -68($sp)
sw $t6, -96($sp)

# push '0'
li $a0, 48

# call Test_Do_While
subi $sp, $sp, 100
jal Test_Do_While

# RestoreEnvironment
addi $sp, $sp, 100
lw $ra, 0($sp)
lw $t0, -60($sp)
lw $t1, -64($sp)
lw $t2, -84($sp)
lw $t3, -36($sp)
lw $t4, -68($sp)
lw $t6, -96($sp)

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -60($sp)
sw $t1, -64($sp)
sw $t2, -84($sp)
sw $t3, -36($sp)
sw $t4, -68($sp)
sw $t6, -96($sp)

# call test_array
subi $sp, $sp, 100
jal test_array

# RestoreEnvironment
addi $sp, $sp, 100
lw $ra, 0($sp)
lw $t0, -60($sp)
lw $t1, -64($sp)
lw $t2, -84($sp)
lw $t3, -36($sp)
lw $t4, -68($sp)
lw $t6, -96($sp)

# t717 = RET
move $t7, $v0

# PrintfTypeDef strType intType 

# printf "test_array is " t717
la $a0, PrintString22
li $v0, 4
syscall
li $v0, 1
move $a0, $t7
syscall
li $v0, 11
li $a0, 10
syscall

# SaveEnvironment
sw $ra, 0($sp)
sw $t0, -60($sp)
sw $t1, -64($sp)
sw $t2, -84($sp)
sw $t3, -36($sp)
sw $t4, -68($sp)
sw $t6, -96($sp)
sw $t7, -100($sp)

# call test_expression
subi $sp, $sp, 104
jal test_expression

# RestoreEnvironment
addi $sp, $sp, 104
lw $ra, 0($sp)
lw $t0, -60($sp)
lw $t1, -64($sp)
lw $t2, -84($sp)
lw $t3, -36($sp)
lw $t4, -68($sp)
lw $t6, -96($sp)
lw $t7, -100($sp)

# t721 = RET
move $t8, $v0

# PrintfTypeDef charType 

# printf t721
li $v0, 11
move $a0, $t8
syscall
li $v0, 11
li $a0, 10
syscall

# PrintfTypeDef strType 

# printf ""
la $a0, PrintString23
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall

# t725 = -100
subi $t5, $0, 100

# PrintfTypeDef intType 

# printf t725
li $v0, 1
move $a0, $t5
syscall
li $v0, 11
li $a0, 10
syscall

# PrintfTypeDef charType 

# printf 'L'
li $v0, 11
li $a0, 76
syscall
li $v0, 11
li $a0, 10
syscall

# PrintfTypeDef strType 

# printf " !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
la $a0, PrintString24
li $v0, 4
syscall
li $v0, 11
li $a0, 10
syscall

# Exit
li $v0, 10
syscall
