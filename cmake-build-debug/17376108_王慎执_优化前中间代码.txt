const char test_cover_a = 'a'
const char test_if = '+'
const int test_cover_1 = 1
const char test_while_a = '0'
const char test_while_z = 'z'
const int a = 2
var int b
var int e
var int c
var int d[5]
var int i
var char g
var int test_cover_2
var int test_cover_3[5]
var char test_cover_b
var char test_cover_c[10]
var char test_function_1
var int test_while
var int test_function_2
int Test_Function_1()
para int n
t2 = n
t1 = t2
t0 = t1
t4 = n
t3 = t4
t5 = n
t3 = t3 * t5
t0 = t0 + t3
ret t0
int Test_Function_2()
para int n
t8 = n
t7 = t8
t6 = t7
t11 = 0
t10 = t11
t9 = t10
t6 <= t9
IfBegin
BZ Label_0
t14 = 1
t13 = t14
t12 = -t13
ret t12
IfRestoreRegs
Label_0:
IfEnd
t17 = n
t16 = t17
t15 = t16
t20 = 1
t19 = t20
t18 = t19
t15 == t18
IfBegin
BZ Label_2
t23 = 1
t22 = t23
t21 = t22
ret t21
IfRestoreRegs
Label_2:
IfEnd
t26 = n
t25 = t26
t24 = t25
t29 = 2
t28 = t29
t27 = t28
t24 == t27
IfBegin
BZ Label_4
t32 = 1
t31 = t32
t30 = t31
ret t30
IfRestoreRegs
Label_4:
IfEnd
t39 = n
t38 = t39
t37 = t38
t41 = 1
t40 = t41
t37 = t37 - t40
push t37
SaveEnvironment
call Test_Function_2
RestoreEnvironment
t36 = RET
t35 = t36
t34 = t35
t33 = t34
t47 = n
t46 = t47
t45 = t46
t49 = 2
t48 = t49
t45 = t45 - t48
push t45
SaveEnvironment
call Test_Function_2
RestoreEnvironment
t44 = RET
t43 = t44
t42 = t43
t33 = t33 + t42
ret t33
void test_cover()
const char test_cover_a = 'A'
const int test_cover_1 = -1
var int test_cover_2
var int test_cover_3[6]
var char test_cover_b
var char test_cover_c[5]
t52 = 2
t51 = t52
t50 = -t51
test_cover_2 = t50
t55 = 3
t54 = t55
t53 = t54
t58 = 3
t57 = t58
t56 = -t57
test_cover_3[t53] = t56
t61 = 'B'
t60 = t61
t59 = t60
test_cover_b = t59
t64 = 3
t63 = t64
t62 = t63
t67 = 'C'
t66 = t67
t65 = t66
test_cover_c[t62] = t65
t70 = test_cover_a
t69 = t70
t68 = t69
PrintfTypeDef charType 
printf t68
t73 = test_cover_1
t72 = t73
t71 = t72
PrintfTypeDef intType 
printf t71
ret 
int f()
para int z
var int b
t76 = 3
t75 = t76
t77 = -1
t75 = t75 * t77
t74 = t75
b = t74
t80 = b
t79 = t80
t78 = t79
t82 = z
t81 = t82
t78 = t78 + t81
b = t78
t85 = b
t84 = t85
t83 = t84
ret t83
void h()
para int y
para char x
t88 = x
t87 = t88
t86 = t87
t90 = y
t89 = t90
t91 = y
t89 = t89 * t91
t86 = t86 + t89
e = t86
ret 
ret 
char l()
t94 = 'l'
t93 = t94
t92 = t93
ret t92
void Test_IF()
para char test_if
t100 = test_if
t99 = t100
t98 = t99
t97 = t98
t96 = t97
t95 = t96
t106 = '0'
t105 = t106
t104 = t105
t103 = t104
t102 = t103
t101 = t102
t95 <= t101
IfBegin
BZ Label_6
PrintfTypeDef strType 
printf "test_if_error_1"
GOTO Label_7
Label_6:
ElseBegin
t112 = test_if
t111 = t112
t110 = t111
t109 = t110
t108 = t109
t107 = t108
t118 = 'A'
t117 = t118
t116 = t117
t115 = t116
t114 = t115
t113 = t114
t107 >= t113
IfBegin
BZ Label_8
t124 = test_if
t123 = t124
t122 = t123
t121 = t122
t120 = t121
t119 = t120
t130 = 'a'
t129 = t130
t128 = t129
t127 = t128
t126 = t127
t125 = t126
t119 > t125
IfBegin
BZ Label_10
PrintfTypeDef strType 
printf "test_if_error_3"
ret 
IfRestoreRegs
Label_10:
IfEnd
t136 = test_if
t135 = t136
t134 = t135
t133 = t134
t132 = t133
t131 = t132
t142 = '_'
t141 = t142
t140 = t141
t139 = t140
t138 = t139
t137 = t138
t131 == t137
IfBegin
BZ Label_12
t145 = test_if
t144 = t145
t143 = t144
PrintfTypeDef strType charType 
printf "test_if_right,the char is " t143
ret 
GOTO Label_13
Label_12:
ElseBegin
PrintfTypeDef strType 
printf "test_if_error_4"
ret 
ElseEnd
Label_13:
GOTO Label_9
Label_8:
ElseBegin
PrintfTypeDef strType 
printf "test_if_error_2"
ret 
ElseEnd
Label_9:
ElseEnd
Label_7:
ret 
void Test_While()
para int test_while
var int count1
var int count2
var int count3
t148 = 0
t147 = t148
t146 = t147
count1 = t146
t151 = 0
t150 = t151
t149 = t150
count2 = t149
t154 = 0
t153 = t154
t152 = t153
count3 = t152
LoopSaveRegStatus
Label_14:
t157 = test_while
t156 = t157
t155 = t156
t163 = 'z'
t162 = t163
t161 = t162
t160 = t161
t159 = t160
t158 = t159
t155 < t158
BZ Label_15
LoopSaveRegStatus
Label_16:
t166 = test_while
t165 = t166
t164 = t165
t172 = 'Z'
t171 = t172
t170 = t171
t169 = t170
t168 = t169
t167 = t168
t164 <= t167
BZ Label_17
LoopSaveRegStatus
Label_18:
t175 = test_while
t174 = t175
t173 = t174
t181 = 'A'
t180 = t181
t179 = t180
t178 = t179
t177 = t178
t176 = t177
t173 < t176
BZ Label_19
t184 = count1
t183 = t184
t182 = t183
t186 = 1
t185 = t186
t182 = t182 + t185
count1 = t182
t189 = test_while
t188 = t189
t187 = t188
t191 = 1
t190 = t191
t187 = t187 + t190
test_while = t187
LoopRestoreRegStatus
GOTO Label_18
Label_19:
LoopEnd
t194 = count2
t193 = t194
t192 = t193
t196 = 2
t195 = t196
t192 = t192 + t195
count2 = t192
t199 = test_while
t198 = t199
t197 = t198
t201 = 1
t200 = t201
t197 = t197 + t200
test_while = t197
LoopRestoreRegStatus
GOTO Label_16
Label_17:
LoopEnd
t204 = count3
t203 = t204
t202 = t203
t206 = 3
t205 = t206
t202 = t202 + t205
count3 = t202
t209 = test_while
t208 = t209
t207 = t208
t211 = 1
t210 = t211
t207 = t207 + t210
test_while = t207
LoopRestoreRegStatus
GOTO Label_14
Label_15:
LoopEnd
t214 = count1
t213 = t214
t212 = t213
PrintfTypeDef strType intType 
printf "the count1 is " t212
t217 = count2
t216 = t217
t215 = t216
PrintfTypeDef strType intType 
printf "the count2 is " t215
t220 = count3
t219 = t220
t218 = t219
PrintfTypeDef strType intType 
printf "the count3 is " t218
t223 = test_while
t222 = t223
t221 = t222
PrintfTypeDef strType intType 
printf "the test_while is " t221
ret 
void Test_Do_While()
para int test_while
var int count1
var int count2
var int count3
t226 = 0
t225 = t226
t224 = t225
count1 = t224
t229 = 0
t228 = t229
t227 = t228
count2 = t227
t232 = 0
t231 = t232
t230 = t231
count3 = t230
LoopSaveRegStatus
Label_20:
LoopSaveRegStatus
Label_21:
LoopSaveRegStatus
Label_22:
t235 = count1
t234 = t235
t233 = t234
t237 = 1
t236 = t237
t233 = t233 + t236
count1 = t233
t240 = test_while
t239 = t240
t238 = t239
t242 = 1
t241 = t242
t238 = t238 + t241
test_while = t238
t245 = test_while
t244 = t245
t243 = t244
t251 = 'A'
t250 = t251
t249 = t250
t248 = t249
t247 = t248
t246 = t247
t243 < t246
BNZ Label_22
LoopEnd
t254 = count2
t253 = t254
t252 = t253
t256 = 1
t255 = t256
t252 = t252 + t255
count2 = t252
t259 = test_while
t258 = t259
t257 = t258
t261 = 1
t260 = t261
t257 = t257 + t260
test_while = t257
t264 = test_while
t263 = t264
t262 = t263
t270 = 'Z'
t269 = t270
t268 = t269
t267 = t268
t266 = t267
t265 = t266
t262 <= t265
BNZ Label_21
LoopEnd
t273 = count3
t272 = t273
t271 = t272
t275 = 1
t274 = t275
t271 = t271 + t274
count3 = t271
t278 = test_while
t277 = t278
t276 = t277
t280 = 1
t279 = t280
t276 = t276 + t279
test_while = t276
t283 = test_while
t282 = t283
t281 = t282
t289 = 'z'
t288 = t289
t287 = t288
t286 = t287
t285 = t286
t284 = t285
t281 < t284
BNZ Label_20
LoopEnd
t292 = count1
t291 = t292
t290 = t291
PrintfTypeDef strType intType 
printf "the count1 is " t290
t295 = count2
t294 = t295
t293 = t294
PrintfTypeDef strType intType 
printf "the count2 is " t293
t298 = count3
t297 = t298
t296 = t297
PrintfTypeDef strType intType 
printf "the count3 is " t296
t301 = test_while
t300 = t301
t299 = t300
PrintfTypeDef strType intType 
printf "test_while is " t299
ret 
int test_array()
var int array_int[5]
var int i
var int result
var char array_char[5]
t304 = 0
t303 = t304
t302 = t303
t307 = '1'
t306 = t307
t305 = t306
array_char[t302] = t305
t310 = 1
t309 = t310
t308 = t309
t313 = '1'
t312 = t313
t311 = t312
array_char[t308] = t311
t316 = 2
t315 = t316
t314 = t315
t319 = '/'
t318 = t319
t317 = t318
array_char[t314] = t317
t322 = 3
t321 = t322
t320 = t321
t325 = '-'
t324 = t325
t323 = t324
array_char[t320] = t323
t328 = 4
t327 = t328
t326 = t327
t331 = 'K'
t330 = t331
t329 = t330
array_char[t326] = t329
t334 = 0
t333 = t334
t332 = t333
i = t332
LoopSaveRegStatus
Label_23:
t337 = i
t336 = t337
t335 = t336
t340 = 5
t339 = t340
t338 = t339
t335 < t338
BZ Label_24
t343 = i
t342 = t343
t341 = t342
t346 = i
t345 = t346
t347 = 5
t345 = t345 * t347
t344 = t345
t349 = 1
t348 = t349
t344 = t344 + t348
array_int[t341] = t344
t352 = i
t351 = t352
t350 = t351
t354 = 1
t353 = t354
t350 = t350 + t353
i = t350
LoopRestoreRegStatus
GOTO Label_23
Label_24:
LoopEnd
t357 = 0
t356 = t357
t355 = t356
i = t355
t360 = 0
t359 = t360
t358 = t359
result = t358
LoopSaveRegStatus
Label_25:
t363 = i
t362 = t363
t361 = t362
t366 = 5
t365 = t366
t364 = t365
t361 < t364
BZ Label_26
t369 = result
t368 = t369
t367 = t368
t374 = i
t373 = t374
t372 = t373
t371 = array_int[t372]
t370 = t371
t378 = i
t377 = t378
t376 = t377
t375 = array_char[t376]
t370 = t370 * t375
t367 = t367 + t370
result = t367
t381 = i
t380 = t381
t379 = t380
t383 = 1
t382 = t383
t379 = t379 + t382
i = t379
LoopRestoreRegStatus
GOTO Label_25
Label_26:
LoopEnd
t386 = result
t385 = t386
t384 = t385
ret t384
char test_expression()
t389 = 'A'
t388 = t389
t387 = t388
t391 = 'd'
t390 = t391
t404 = 2
t403 = t404
t402 = t403
push t402
SaveEnvironment
call Test_Function_1
RestoreEnvironment
t401 = RET
t400 = t401
t399 = t400
t398 = t399
push t398
SaveEnvironment
call Test_Function_1
RestoreEnvironment
t397 = RET
t396 = t397
t395 = t396
t394 = t395
push t394
SaveEnvironment
call Test_Function_1
RestoreEnvironment
t393 = RET
t392 = t393
t390 = t390 * t392
t387 = t387 + t390
t407 = 180665
t406 = t407
t405 = t406
t387 != t405
IfBegin
BZ Label_27
t410 = 'a'
t409 = t410
t408 = t409
ret t408
IfRestoreRegs
Label_27:
IfEnd
t413 = '+'
t412 = t413
t414 = -3
t412 = t412 * t414
t411 = -t412
t416 = -0
t415 = t416
t411 = t411 + t415
t418 = -100
t417 = t418
t422 = 'a'
t421 = t422
t420 = t421
t424 = 'b'
t423 = t424
t420 = t420 - t423
t419 = t420
t417 = t417 * t419
t411 = t411 - t417
t427 = 29
t426 = t427
t425 = t426
t411 != t425
IfBegin
BZ Label_29
t430 = 'b'
t429 = t430
t428 = t429
ret t428
IfRestoreRegs
Label_29:
IfEnd
t436 = 3
t435 = t436
t434 = t435
t433 = test_cover_3[t434]
t432 = t433
t431 = -t432
t441 = 1000
t440 = t441
t439 = t440
t443 = 0
t442 = t443
t439 = t439 - t442
t445 = -2
t444 = t445
t439 = t439 - t444
t438 = t439
t437 = t438
t446 = 2
t437 = t437 / t446
t431 = t431 + t437
t449 = 498
t448 = t449
t447 = t448
t431 != t447
IfBegin
BZ Label_31
t452 = 'c'
t451 = t452
t450 = t451
ret t450
IfRestoreRegs
Label_31:
IfEnd
t455 = 6
t454 = t455
t456 = 10
t454 = t454 / t456
t453 = t454
t458 = 6
t457 = t458
t462 = 6
t461 = t462
t460 = t461
t464 = -1
t463 = t464
t460 = t460 + t463
t459 = t460
t457 = t457 / t459
t465 = 7
t457 = t457 * t465
t469 = 3
t468 = t469
t467 = t468
t466 = test_cover_c[t467]
t457 = t457 * t466
t453 = t453 - t457
t472 = 693
t471 = t472
t470 = -t471
t453 != t470
IfBegin
BZ Label_33
t475 = 'd'
t474 = t475
t473 = t474
ret t473
IfRestoreRegs
Label_33:
IfEnd
t487 = 6
t486 = t487
t485 = t486
t489 = 3
t488 = t489
t485 = t485 - t488
t484 = t485
t483 = t484
t490 = 7
t483 = t483 * t490
t482 = t483
t492 = 5
t491 = t492
t482 = t482 + t491
t481 = t482
t480 = t481
t493 = 8
t480 = t480 * t493
t479 = t480
t495 = 9
t494 = t495
t479 = t479 + t494
t478 = t479
t477 = t478
t496 = -10
t477 = t477 * t496
t476 = t477
t498 = 11
t497 = t498
t476 = t476 + t497
t501 = 2159
t500 = t501
t499 = -t500
t476 != t499
IfBegin
BZ Label_35
t504 = 'e'
t503 = t504
t502 = t503
ret t502
IfRestoreRegs
Label_35:
IfEnd
t507 = 'R'
t506 = t507
t505 = t506
ret t505
void main()
var int test_function_2
scanf test_function_1 test_function_2
scanf test_cover_2 test_cover_b
scanf test_while
t526 = test_function_1
t525 = t526
t524 = t525
t528 = 'a'
t527 = t528
t524 = t524 - t527
push t524
SaveEnvironment
call Test_Function_1
RestoreEnvironment
t523 = RET
t522 = t523
t521 = t522
t520 = t521
push t520
SaveEnvironment
call Test_Function_1
RestoreEnvironment
t519 = RET
t518 = t519
t517 = t518
t516 = t517
push t516
SaveEnvironment
call Test_Function_1
RestoreEnvironment
t515 = RET
t514 = t515
t513 = t514
t512 = t513
push t512
SaveEnvironment
call Test_Function_1
RestoreEnvironment
t511 = RET
t510 = t511
t509 = t510
t508 = t509
PrintfTypeDef intType 
printf t508
t535 = test_function_2
t534 = t535
t533 = t534
push t533
SaveEnvironment
call Test_Function_2
RestoreEnvironment
t532 = RET
t531 = t532
t530 = t531
t529 = t530
PrintfTypeDef intType 
printf t529
t538 = 3
t537 = t538
t536 = t537
t541 = 3
t540 = t541
t539 = t540
test_cover_3[t536] = t539
t544 = 3
t543 = t544
t542 = t543
t547 = 'c'
t546 = t547
t545 = t546
test_cover_c[t542] = t545
SaveEnvironment
call test_cover
RestoreEnvironment
t550 = test_cover_2
t549 = t550
t548 = t549
PrintfTypeDef intType 
printf t548
t553 = test_cover_b
t552 = t553
t551 = t552
PrintfTypeDef charType 
printf t551
t559 = 3
t558 = t559
t557 = t558
t556 = test_cover_3[t557]
t555 = t556
t554 = t555
PrintfTypeDef intType 
printf t554
t565 = 3
t564 = t565
t563 = t564
t562 = test_cover_c[t563]
t561 = t562
t560 = t561
PrintfTypeDef charType 
printf t560
PrintfTypeDef strType 
printf "assign to int and char"
scanf c g
t568 = 2
t567 = t568
t566 = t567
t571 = 1
t570 = t571
t569 = t570
d[t566] = t569
t577 = 2
t576 = t577
t575 = t576
t574 = d[t575]
t573 = t574
t572 = t573
t572 != 0
IfBegin
BZ Label_37
t580 = c
t579 = t580
t578 = t579
t585 = 2
t584 = t585
t583 = t584
t582 = d[t583]
t581 = t582
t578 = t578 + t581
b = t578
GOTO Label_38
Label_37:
ElseBegin
t595 = 2
t594 = t595
t593 = t594
t592 = d[t593]
t591 = t592
t590 = t591
push t590
SaveEnvironment
call f
RestoreEnvironment
t589 = RET
t588 = t589
t587 = t588
t586 = t587
b = t586
ElseEnd
Label_38:
t598 = b
t597 = t598
t596 = t597
PrintfTypeDef strType intType 
printf "if_else" t596
t601 = a
t600 = t601
t599 = t600
t604 = 0
t603 = t604
t602 = t603
t599 > t602
IfBegin
BZ Label_39
t607 = c
t606 = t607
t605 = t606
b = t605
IfRestoreRegs
Label_39:
IfEnd
t610 = b
t609 = t610
t608 = t609
PrintfTypeDef strType intType 
printf "only if" t608
t613 = 0
t612 = t613
t611 = t612
i = t611
LoopSaveRegStatus
Label_41:
t616 = i
t615 = t616
t614 = t615
t619 = 5
t618 = t619
t617 = t618
t614 < t617
BZ Label_42
t622 = c
t621 = t622
t620 = t621
t627 = 2
t626 = t627
t625 = t626
t624 = d[t625]
t623 = t624
t620 = t620 + t623
c = t620
t630 = i
t629 = t630
t628 = t629
t632 = 1
t631 = t632
t628 = t628 + t631
i = t628
LoopRestoreRegStatus
GOTO Label_41
Label_42:
LoopEnd
t635 = c
t634 = t635
t633 = t634
PrintfTypeDef strType intType 
printf "while" t633
LoopSaveRegStatus
Label_43:
t638 = i
t637 = t638
t636 = t637
t640 = 1
t639 = t640
t636 = t636 - t639
i = t636
t643 = i
t642 = t643
t641 = t642
t646 = 0
t645 = t646
t644 = t645
t641 >= t644
BNZ Label_43
LoopEnd
t649 = i
t648 = t649
t647 = t648
PrintfTypeDef strType intType 
printf "do_while" t647
t655 = 2
t654 = t655
t653 = t654
t652 = d[t653]
t651 = t652
t650 = t651
PrintfTypeDef strType intType 
printf "d[2] before h" t650
t658 = c
t657 = t658
t656 = t657
t664 = 2
t663 = t664
t662 = t663
t661 = d[t662]
t660 = t661
t659 = t660
push t656
push t659
SaveEnvironment
call h
RestoreEnvironment
t670 = 2
t669 = t670
t668 = t669
t667 = d[t668]
t666 = t667
t665 = t666
PrintfTypeDef strType intType 
printf "d[2] after h" t665
t672 = 0
t671 = t672
i = t671
LoopSaveRegStatus
Label_44:
t675 = i
t674 = t675
t673 = t674
t678 = 5
t677 = t678
t676 = t677
t673 < t676
BZ Label_45
t684 = 2
t683 = t684
t682 = t683
t681 = d[t682]
t680 = t681
t679 = t680
t686 = 1
t685 = t686
t679 = t679 + t685
c = t679
t689 = 2
t688 = t689
t687 = t688
t692 = e
t691 = t692
t690 = t691
SaveEnvironment
call l
RestoreEnvironment
t695 = RET
t694 = t695
t693 = t694
t690 = t690 + t693
d[t687] = t690
i = i + 1
LoopRestoreRegStatus
GOTO Label_44
Label_45:
LoopEnd
t701 = 2
t700 = t701
t699 = t700
t698 = d[t699]
t697 = t698
t696 = t697
PrintfTypeDef strType intType 
printf "call_for" t696
PrintfTypeDef strType 
printf "Constant and parameter have the same name"
t704 = '_'
t703 = t704
t702 = t703
push t702
SaveEnvironment
call Test_IF
RestoreEnvironment
t710 = '0'
t709 = t710
t708 = t709
t707 = t708
t706 = t707
t705 = t706
push t705
SaveEnvironment
call Test_While
RestoreEnvironment
t716 = '0'
t715 = t716
t714 = t715
t713 = t714
t712 = t713
t711 = t712
push t711
SaveEnvironment
call Test_Do_While
RestoreEnvironment
SaveEnvironment
call test_array
RestoreEnvironment
t720 = RET
t719 = t720
t718 = t719
t717 = t718
PrintfTypeDef strType intType 
printf "test_array is " t717
SaveEnvironment
call test_expression
RestoreEnvironment
t724 = RET
t723 = t724
t722 = t723
t721 = t722
PrintfTypeDef charType 
printf t721
PrintfTypeDef strType 
printf ""
t727 = 100
t726 = t727
t725 = -t726
PrintfTypeDef intType 
printf t725
t730 = 'L'
t729 = t730
t728 = t729
PrintfTypeDef charType 
printf t728
PrintfTypeDef strType 
printf " !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
Exit
